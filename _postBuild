#!/bin/bash


# export NEURON_HOME=$HOME/neuron
# mkdir $NEURON_HOME
# cd $NEURON_HOME
#
# echo $PYTHONPATH
# export PYTHONPATH=`which python3` #/usr/local/lib/python3.5/
# export PYTHONHOME=/srv/conda # For me it was /Users/rgerkin/miniconda3
# export LD_LIBRARY_PATH=$PYTHONHOME/lib
# export PATH=$PATH:$NEURON_HOME/nrn/x86_64/bin
# export PYTHONPATH=$PYTHONPATH:$NEURON_HOME/nrn/lib/python/



#USER root
pip install --upgrade pip
#USER ${NB_USER}

### NEURON installation
export VNRN=7.5
#export VIV=19
export ARCH=x86_64
NCORES=$(nproc)
export NCORES
echo "Compiling with $NCORES"


#ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/conda/bin
export NDIR=$HOME/neuron
mkdir $NDIR
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NDIR/nrn/$ARCH/lib:/usr/lib/x86_64-linux-gnu:/usr/lib:$CONDA_DIR/lib
#RUN ls /usr/lib
#RUN ls /usr/share
#RUN dpkg -L libreadline-dev
#RUN find /usr -name "libtinfo.so*"

wget -q http://www.neuron.yale.edu/ftp/neuron/versions/v$VNRN/nrn-$VNRN.tar.gz
#wget -q http://www.neuron.yale.edu/ftp/neuron/versions/v$VNRN/iv-$VIV.tar.gz
#tar xzf iv-$VIV.tar.gz; rm iv-$VIV.tar.gz; mv iv-$VIV iv
tar xzf nrn-$VNRN.tar.gz; rm nrn-$VNRN.tar.gz; mv nrn-$VNRN $NDIR/nrn
# https://neuron.yale.edu/ftp/neuron/versions/v7.5/nrn-7.5.tar.gz

#RUN git clone https://github.com/nrnhines/nrn.git
conda remove --force ncurses #readline
#cd $NDIR/iv; ./build.sh; ./configure --prefix=`pwd` --with-x --x-includes=/usr/include/ --x-libraries=/usr/lib/ && make && make install
#cd $NDIR/nrn; sh src/nrnmpi/mkdynam.sh; ./build.sh;
cd $NDIR/nrn; ./build.sh;
#RUN cd $NDIR/nrn; 2to3 -w src/oc/mk_hocusr_h.py; sed -i '1i from __future__ import print_function' src/oc/mk_hocusr_h.py
#RUN cd $NDIR/nrn; sed -i.bak -e "s/print sys.api_version,/from __future__ import print_function; print(sys.api_version)/" configure
#RUN cd $NDIR/nrn; ./configure --prefix=`pwd` --with-nrnpython=$NRNPY --with-paranrn=dynamic --with-iv=$NDIR/iv \
#--with-x --x-includes=/usr/include/ --x-libraries=/usr/lib/ --with-mpi && make && make install
cd $NDIR/nrn; ./configure --prefix="$(pwd)" --without-x --without-iv --with-nrnpython --with-paranrn && make -j$NCORES && make install
# --disable-rx3d
# --libdir=/usr/lib/x86_64-linux-gnu
# --with-readline=/usr/lib
# --libdir=/usr/lib
#RUN ls $NDIR/nrn
#RUN cat $NDIR/nrn/config.log
#cd $NDIR/nrn; make -j$NCORES && make install
# openmpi or mpich
#--with-mpi
#--with-paranrn=dynamic
#--with-nrnpython-only
#USER root
#RUN echo 'export PATH=$PATH:$NDIR/iv/$ARCH/bin:$NDIR/nrn/$ARCH/bin' >> /etc/bash.bashrc
echo 'export PATH=$PATH:$NDIR/nrn/$ARCH/bin' | sudo tee -a /etc/bash.bashrc
#RUN echo 'PYTHONPATH=$PYTHONPATH:$NDIR/nrn/lib/python'
echo 'export NRN_NMODL_PATH=$NDIR' | sudo tee -a /etc/bash.bashrc
export NRN_NMODL_PATH=$NDIR
cd $NDIR/nrn/src/nrnpython; python setup.py install
chmod o+w $NDIR

#USER ${NB_USER}

#ENV CPB3 /home/main/anaconda2/envs/python3/bin
### Install PyRhO
#ENV VPYRHO 0.9.4
# For upgrading: -U --ignore-installed --no-deps
## Install for Python 2
#RUN pip install pyrho[full]==$VPYRHO
#RUN ln -s /home/main/anaconda2/bin/pip /home/main/anaconda2/bin/pip2
#RUN ln -s /home/main/anaconda2/envs/python3/bin/pip /home/main/anaconda2/envs/python3/bin/pip3
#pip install git+https://github.com/ProjectPyRhO/PyRhO.git#egg=PyRhO[full]
## Install for Python 3
#RUN $CPB3/pip install git+https://github.com/ProjectPyRhO/PyRhO.git#egg=PyRhO[full]
# Alternative to installing for Python 3
#RUN source activate python3
#RUN pip install --ignore-installed --no-deps pyrho[full]
#RUN source deactivate

# matplotlib config (used by benchmark)
#USER root
#RUN apt-get install -y libgl1-mesa-glx
#USER ${NB_USER}
#RUN python -c "import matplotlib as mpl; mpl.use('Agg');"
mkdir -p /home/${NB_USER}/.config/matplotlib
echo "backend : Agg" > /home/${NB_USER}/.config/matplotlib/matplotlibrc
#RUN source /etc/bash.bashrc
#WORKDIR /home/${NB_USER}
cd ~; python -c "from pyrho import *; setupNEURON()"

# Fix matplotlib font cache
rm -rf /home/${NB_USER}/.matplolib/*
rm -rf /home/${NB_USER}/.cache/matplolib/*
rm -rf /home/${NB_USER}/.cache/fontconfig/*
python -c "import matplotlib.pyplot as plt"

# notebooks created by binder
#COPY index.ipynb /home/${NB_USER}/index.ipynb
#RUN jupyter nbconvert --inplace --to notebook *.ipynb
#--output 'index.ipynb'
#USER root
### Copy demonstration notebook and config files to home directory
#RUN find /home/${NB_USER} -name '*.ipynb' -exec jupyter nbconvert --to notebook {} --output {} \; && \
#    chown -R ${NB_USER}:${NB_GID} /home/${NB_USER}

#COPY jupyter_notebook_config.py $HOME/.jupyter/
#RUN chown -R main:main $HOME/notebooks
#RUN chown -R ${NB_USER}:${NB_GID} $NDIR

# Install our custom.js
# COPY resources/custom.js /home/${NB_USER}/.jupyter/custom/
#
# # TODO: Check for /srv/ and /tmp/
# USER root
# COPY resources/templates/ /srv/templates/
# RUN chmod a+rX /srv/templates
#
# # Append tmpnb specific options to the base config
# COPY resources/jupyter_notebook_config.partial.py /tmp/
# RUN cat /tmp/jupyter_notebook_config.partial.py >> /home/${NB_USER}/.jupyter/jupyter_notebook_config.py && \
#     rm /tmp/jupyter_notebook_config.partial.py
#
# RUN pip install nbgoogleanalytics
# RUN jupyter nbextensions install --py --sys-prefix nbgoogleanalytics
# RUN jupyter nbextensions enable --py --sys-prefix nbgoogleanalytics
# RUN jupyter serverextensions enable --sys-prefix nbgoogleanalytics
# RUN jupyter notebook --GoogleAnalytics.tracking_id="UA-82943814-1"

# Enable extensions for ipywidgets
# https://mybinder.readthedocs.io/en/latest/sample_repos.html#enabling-jupyter-extensions-with-post-build-commands
jupyter contrib nbextension install --user
jupyter nbextension enable --py widgetsnbextension
#jupyter nbextension enable python-markdown/main

# Notebooks w/ extensions that auto-run code must be "trusted" to work the first time
#jupyter trust index.ipynb
# USER ${NB_USER}
find . -name '*.ipynb' -exec jupyter trust {} \;

chown -R ${NB_USER}:${NB_GID} ${HOME}

# Cleanup
rm environment.yml
rm postBuild
